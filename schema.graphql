# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Account {
    address: String!
    balances(after: Int, before: Int, first: Int, last: Int, orderBy: BalanceOrderByInput, skip: Int, where: BalanceWhereInput): [Balance!]!
    transactions(after: Int, before: Int, first: Int, last: Int, skip: Int): [Transaction!]!
}

type Asset {
    account: Account
    assetId: String!
    assetTransfers(after: Int, before: Int, first: Int, last: Int, skip: Int): [AssetTransfer!]!
    name: String!
    supply: String!
    symbol: String!
    transaction: Transaction!
}

type AssetTransfer {
    from: Account!
    to: Account!
    transaction: Transaction!
    value: String!
}

type Balance {
    account: Account!
    asset: Asset!
    balance: String!
    compound: String!
}

type Block {
    height: Int!
    orderedTransactionRoot: String!
    preHash: String!
    proofBitmap: String!
    proofBlockHash: String!
    proofRound: String!
    proofSignature: String!
    proposer: String!
    stateRoot: String!
    timestamp: DateTime!
    transactions(after: Int, before: Int, first: Int, last: Int, skip: Int): [Transaction!]!
    transactionsCount: Int!
    validatorVersion: String!
    validators(after: String, before: String, first: Int, last: Int, skip: Int): [Validator!]!
}

type Event {
    data: String!
    service: String!
}

type Query {
    account(where: AccountWhereUniqueInput!): Account
    accounts(after: String, before: String, first: Int, last: Int, orderBy: AccountOrderByInput, skip: Int, where: AccountWhereInput): [Account!]!
    asset(where: AssetWhereUniqueInput!): Asset
    assetTransfer(where: AssetTransferWhereUniqueInput!): AssetTransfer
    assetTransfers(after: Int, before: Int, first: Int, last: Int, orderBy: AssetTransferOrderByInput, skip: Int, where: AssetTransferWhereInput): [AssetTransfer!]!
    assets(after: String, before: String, first: Int, last: Int, orderBy: AssetOrderByInput, skip: Int, where: AssetWhereInput): [Asset!]!
    block(where: BlockWhereUniqueInput!): Block
    blocks(after: Int, before: Int, first: Int, last: Int, orderBy: BlockOrderByInput, skip: Int, where: BlockWhereInput): [Block!]!
    transaction(where: TransactionWhereUniqueInput!): Transaction
    transactions(after: Int, before: Int, first: Int, last: Int, orderBy: TransactionOrderByInput, skip: Int, where: TransactionWhereInput): [Transaction!]!
    validator(where: ValidatorWhereUniqueInput!): Validator
}

type Transaction {
    block: Block!
    cyclesLimit: String!
    cyclesPrice: String!
    cyclesUsed: String
    from: Account!
    method: String!
    nonce: String!
    order: Int!
    payload: String!
    pubkey: String!
    receiptIsError: Boolean
    receiptRet: String
    serviceName: String!
    signature: String!
    txHash: String!
}

type Validator {
    address: String!
    blocks(after: Int, before: Int, first: Int, last: Int, skip: Int): [Block!]!
    proposeWeight: Int!
    voteWeight: Int!
}

enum OrderByArg {
    asc
    desc
}

input AccountOrderByInput {
    address: OrderByArg
}

input AccountWhereInput {
    AND: [AccountWhereInput!]
    NOT: [AccountWhereInput!]
    OR: [AccountWhereInput!]
    address: StringFilter
    assets: AssetFilter
    balances: BalanceFilter
    transactions: TransactionFilter
    transferFrom: AssetTransferFilter
    transferTo: AssetTransferFilter
}

input AccountWhereUniqueInput {
    address: String
}

input AssetFilter {
    every: AssetWhereInput
    none: AssetWhereInput
    some: AssetWhereInput
}

input AssetOrderByInput {
    assetId: OrderByArg
    name: OrderByArg
    supply: OrderByArg
    symbol: OrderByArg
}

input AssetTransferFilter {
    every: AssetTransferWhereInput
    none: AssetTransferWhereInput
    some: AssetTransferWhereInput
}

input AssetTransferOrderByInput {
    id: OrderByArg
    value: OrderByArg
}

input AssetTransferWhereInput {
    AND: [AssetTransferWhereInput!]
    NOT: [AssetTransferWhereInput!]
    OR: [AssetTransferWhereInput!]
    asset: AssetWhereInput
    from: AccountWhereInput
    id: IntFilter
    to: AccountWhereInput
    transaction: TransactionWhereInput
    value: StringFilter
}

input AssetTransferWhereUniqueInput {
    id: Int
}

input AssetWhereInput {
    AND: [AssetWhereInput!]
    NOT: [AssetWhereInput!]
    OR: [AssetWhereInput!]
    account: AccountWhereInput
    assetId: StringFilter
    assetTransfers: AssetTransferFilter
    balances: BalanceFilter
    name: StringFilter
    supply: StringFilter
    symbol: StringFilter
    transaction: TransactionWhereInput
}

input AssetWhereUniqueInput {
    assetId: String
}

input BalanceFilter {
    every: BalanceWhereInput
    none: BalanceWhereInput
    some: BalanceWhereInput
}

input BalanceOrderByInput {
    balance: OrderByArg
    compound: OrderByArg
    id: OrderByArg
}

input BalanceWhereInput {
    AND: [BalanceWhereInput!]
    NOT: [BalanceWhereInput!]
    OR: [BalanceWhereInput!]
    account: AccountWhereInput
    asset: AssetWhereInput
    balance: StringFilter
    compound: StringFilter
    id: IntFilter
}

input BlockFilter {
    every: BlockWhereInput
    none: BlockWhereInput
    some: BlockWhereInput
}

input BlockOrderByInput {
    execHeight: OrderByArg
    height: OrderByArg
    orderRoot: OrderByArg
    preHash: OrderByArg
    proofBitmap: OrderByArg
    proofBlockHash: OrderByArg
    proofRound: OrderByArg
    proofSignature: OrderByArg
    proposer: OrderByArg
    stateRoot: OrderByArg
    timestamp: OrderByArg
    transactionsCount: OrderByArg
    validatorVersion: OrderByArg
}

input BlockWhereInput {
    AND: [BlockWhereInput!]
    NOT: [BlockWhereInput!]
    OR: [BlockWhereInput!]
    execHeight: IntFilter
    height: IntFilter
    orderRoot: StringFilter
    preHash: StringFilter
    proofBitmap: StringFilter
    proofBlockHash: StringFilter
    proofRound: StringFilter
    proofSignature: StringFilter
    proposer: StringFilter
    stateRoot: StringFilter
    timestamp: DateTimeFilter
    transactions: TransactionFilter
    transactionsCount: IntFilter
    validatorVersion: StringFilter
    validators: ValidatorFilter
}

input BlockWhereUniqueInput {
    height: Int
}

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: DateTime
    notIn: [DateTime!]
}

input EventFilter {
    every: EventWhereInput
    none: EventWhereInput
    some: EventWhereInput
}

input EventWhereInput {
    AND: [EventWhereInput!]
    NOT: [EventWhereInput!]
    OR: [EventWhereInput!]
    data: StringFilter
    id: IntFilter
    receipt: TransactionWhereInput
    service: StringFilter
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

input NullableBooleanFilter {
    equals: Boolean
    not: Boolean
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

input TransactionFilter {
    every: TransactionWhereInput
    none: TransactionWhereInput
    some: TransactionWhereInput
}

input TransactionOrderByInput {
    chainId: OrderByArg
    cyclesLimit: OrderByArg
    cyclesPrice: OrderByArg
    cyclesUsed: OrderByArg
    method: OrderByArg
    nonce: OrderByArg
    order: OrderByArg
    payload: OrderByArg
    pubkey: OrderByArg
    receiptIsError: OrderByArg
    receiptRet: OrderByArg
    serviceName: OrderByArg
    signature: OrderByArg
    timeout: OrderByArg
    txHash: OrderByArg
}

input TransactionWhereInput {
    AND: [TransactionWhereInput!]
    NOT: [TransactionWhereInput!]
    OR: [TransactionWhereInput!]
    block: BlockWhereInput
    chainId: StringFilter
    createdAsset: AssetWhereInput
    cyclesLimit: StringFilter
    cyclesPrice: StringFilter
    cyclesUsed: NullableStringFilter
    events: EventFilter
    from: AccountWhereInput
    method: StringFilter
    nonce: StringFilter
    order: IntFilter
    payload: StringFilter
    pubkey: StringFilter
    receiptIsError: NullableBooleanFilter
    receiptRet: NullableStringFilter
    serviceName: StringFilter
    signature: StringFilter
    timeout: StringFilter
    transfer: AssetTransferWhereInput
    txHash: StringFilter
}

input TransactionWhereUniqueInput {
    order: Int
    txHash: String
}

input ValidatorFilter {
    every: ValidatorWhereInput
    none: ValidatorWhereInput
    some: ValidatorWhereInput
}

input ValidatorWhereInput {
    AND: [ValidatorWhereInput!]
    NOT: [ValidatorWhereInput!]
    OR: [ValidatorWhereInput!]
    address: StringFilter
    blocks: BlockFilter
    proposeWeight: IntFilter
    voteWeight: IntFilter
}

input ValidatorWhereUniqueInput {
    address: String
}


scalar DateTime