# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Account {
    address: String!
    transactions(after: Int, before: Int, first: Int, last: Int, skip: Int): [Transaction!]!
}

type Asset {
    account: Account!
    assetId: String!
    assetTransfers(after: Int, before: Int, first: Int, last: Int, skip: Int): [AssetTransfer!]!
    creationTransaction: Transaction!
    name: String!
    supply: String!
    symbol: String!
}

type AssetTransfer {
    from: Account!
    to: Account!
    transaction: Transaction!
    value: String!
}

type Block {
    height: Int!
    orderedTransactionRoot: String!
    preHash: String!
    proof: Proof!
    stateRoot: String!
    timestamp: DateTime!
    transactions(after: Int, before: Int, first: Int, last: Int, skip: Int): [Transaction!]!
    transactionsCount: Int!
    validatorVersion: String!
    validators(after: Int, before: Int, first: Int, last: Int, skip: Int): [Validator!]!
}

type Event {
    data: String!
    receipt: Receipt!
}

type Proof {
    bitmap: String!
    blockHash: String!
    round: Int!
    signature: String!
}

type Query {
    account(where: AccountWhereUniqueInput!): Account
    accounts(after: Int, before: Int, first: Int, last: Int, orderBy: AccountOrderByInput, skip: Int, where: AccountWhereInput): [Account!]!
    asset(where: AssetWhereUniqueInput!): Asset
    assetTransfer(where: AssetTransferWhereUniqueInput!): AssetTransfer
    assetTransfers(after: Int, before: Int, first: Int, last: Int, orderBy: AssetTransferOrderByInput, skip: Int, where: AssetTransferWhereInput): [AssetTransfer!]!
    assets(after: Int, before: Int, first: Int, last: Int, orderBy: AssetOrderByInput, skip: Int, where: AssetWhereInput): [Asset!]!
    block(where: BlockWhereUniqueInput!): Block
    blocks(after: Int, before: Int, first: Int, last: Int, orderBy: BlockOrderByInput, skip: Int, where: BlockWhereInput): [Block!]!
    receipt(where: ReceiptWhereUniqueInput!): Receipt
    receipts(after: Int, before: Int, first: Int, last: Int, orderBy: ReceiptOrderByInput, skip: Int, where: ReceiptWhereInput): [Receipt!]!
    transaction(where: TransactionWhereUniqueInput!): Transaction
    transactions(after: Int, before: Int, first: Int, last: Int, orderBy: TransactionOrderByInput, skip: Int, where: TransactionWhereInput): [Transaction!]!
    validator(where: ValidatorWhereUniqueInput!): Validator
}

type Receipt {
    cyclesUsed: String!
    events(after: Int, before: Int, first: Int, last: Int, skip: Int): [Event!]!
    response: ReceiptResponse!
    transaction: Transaction!
}

type ReceiptResponse {
    isError: Boolean!
    ret: String!
}

type Transaction {
    account: Account!
    block: Block!
    cyclesLimit: String!
    cyclesPrice: String!
    method: String!
    nonce: String!
    payload: String!
    pubkey: String!
    receipt: Receipt
    serviceName: String!
    signature: String!
    txHash: String!
}

type Validator {
    address: String!
    blocks(after: Int, before: Int, first: Int, last: Int, skip: Int): [Block!]!
    proposeWeight: Int!
    voteWeight: Int!
}

enum OrderByArg {
    asc
    desc
}

input AccountOrderByInput {
    address: OrderByArg
    id: OrderByArg
}

input AccountWhereInput {
    AND: [AccountWhereInput!]
    NOT: [AccountWhereInput!]
    OR: [AccountWhereInput!]
    address: StringFilter
    assets: AssetFilter
    id: IntFilter
    transactions: TransactionFilter
    transferFrom: AssetTransferFilter
    transferTo: AssetTransferFilter
}

input AccountWhereUniqueInput {
    address: String
    id: Int
}

input AssetFilter {
    every: AssetWhereInput
    none: AssetWhereInput
    some: AssetWhereInput
}

input AssetOrderByInput {
    assetId: OrderByArg
    id: OrderByArg
    name: OrderByArg
    supply: OrderByArg
    symbol: OrderByArg
}

input AssetTransferFilter {
    every: AssetTransferWhereInput
    none: AssetTransferWhereInput
    some: AssetTransferWhereInput
}

input AssetTransferOrderByInput {
    id: OrderByArg
    value: OrderByArg
}

input AssetTransferWhereInput {
    AND: [AssetTransferWhereInput!]
    NOT: [AssetTransferWhereInput!]
    OR: [AssetTransferWhereInput!]
    asset: AssetWhereInput
    from: AccountWhereInput
    id: IntFilter
    to: AccountWhereInput
    transaction: TransactionWhereInput
    value: StringFilter
}

input AssetTransferWhereUniqueInput {
    id: Int
}

input AssetWhereInput {
    AND: [AssetWhereInput!]
    NOT: [AssetWhereInput!]
    OR: [AssetWhereInput!]
    account: AccountWhereInput
    assetId: StringFilter
    assetTransfers: AssetTransferFilter
    creationTransaction: TransactionWhereInput
    id: IntFilter
    name: StringFilter
    supply: StringFilter
    symbol: StringFilter
}

input AssetWhereUniqueInput {
    assetId: String
    id: Int
}

input BlockFilter {
    every: BlockWhereInput
    none: BlockWhereInput
    some: BlockWhereInput
}

input BlockOrderByInput {
    height: OrderByArg
    id: OrderByArg
    orderRoot: OrderByArg
    preHash: OrderByArg
    proposer: OrderByArg
    stateRoot: OrderByArg
    timestamp: OrderByArg
    transactionsCount: OrderByArg
    validatorVersion: OrderByArg
}

input BlockWhereInput {
    AND: [BlockWhereInput!]
    NOT: [BlockWhereInput!]
    OR: [BlockWhereInput!]
    height: IntFilter
    id: IntFilter
    orderRoot: StringFilter
    preHash: StringFilter
    proof: ProofWhereInput
    proposer: StringFilter
    stateRoot: StringFilter
    timestamp: DateTimeFilter
    transactions: TransactionFilter
    transactionsCount: IntFilter
    validatorVersion: StringFilter
    validators: ValidatorFilter
}

input BlockWhereUniqueInput {
    height: Int
    id: Int
}

input BooleanFilter {
    equals: Boolean
    not: Boolean
}

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: DateTime
    notIn: [DateTime!]
}

input EventFilter {
    every: EventWhereInput
    none: EventWhereInput
    some: EventWhereInput
}

input EventWhereInput {
    AND: [EventWhereInput!]
    NOT: [EventWhereInput!]
    OR: [EventWhereInput!]
    data: StringFilter
    id: IntFilter
    receipt: ReceiptWhereInput
    service: StringFilter
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

input ProofWhereInput {
    AND: [ProofWhereInput!]
    NOT: [ProofWhereInput!]
    OR: [ProofWhereInput!]
    bitmap: StringFilter
    blockHash: StringFilter
    blocks: BlockFilter
    height: IntFilter
    id: IntFilter
    round: IntFilter
    signature: StringFilter
}

input ReceiptOrderByInput {
    cyclesUsed: OrderByArg
    id: OrderByArg
}

input ReceiptResponseWhereInput {
    AND: [ReceiptResponseWhereInput!]
    NOT: [ReceiptResponseWhereInput!]
    OR: [ReceiptResponseWhereInput!]
    id: IntFilter
    isError: BooleanFilter
    receipt: ReceiptWhereInput
    ret: StringFilter
}

input ReceiptWhereInput {
    AND: [ReceiptWhereInput!]
    NOT: [ReceiptWhereInput!]
    OR: [ReceiptWhereInput!]
    cyclesUsed: StringFilter
    events: EventFilter
    id: IntFilter
    response: ReceiptResponseWhereInput
    transaction: TransactionWhereInput
}

input ReceiptWhereUniqueInput {
    id: Int
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

input TransactionFilter {
    every: TransactionWhereInput
    none: TransactionWhereInput
    some: TransactionWhereInput
}

input TransactionOrderByInput {
    chainId: OrderByArg
    cyclesLimit: OrderByArg
    cyclesPrice: OrderByArg
    id: OrderByArg
    method: OrderByArg
    nonce: OrderByArg
    payload: OrderByArg
    pubkey: OrderByArg
    serviceName: OrderByArg
    signature: OrderByArg
    timeout: OrderByArg
    txHash: OrderByArg
}

input TransactionWhereInput {
    AND: [TransactionWhereInput!]
    NOT: [TransactionWhereInput!]
    OR: [TransactionWhereInput!]
    account: AccountWhereInput
    block: BlockWhereInput
    chainId: StringFilter
    createdAsset: AssetWhereInput
    cyclesLimit: StringFilter
    cyclesPrice: StringFilter
    id: IntFilter
    method: StringFilter
    nonce: StringFilter
    payload: StringFilter
    pubkey: StringFilter
    receipt: ReceiptWhereInput
    serviceName: StringFilter
    signature: StringFilter
    timeout: StringFilter
    transfer: AssetTransferWhereInput
    txHash: StringFilter
}

input TransactionWhereUniqueInput {
    id: Int
    txHash: String
}

input ValidatorFilter {
    every: ValidatorWhereInput
    none: ValidatorWhereInput
    some: ValidatorWhereInput
}

input ValidatorWhereInput {
    AND: [ValidatorWhereInput!]
    NOT: [ValidatorWhereInput!]
    OR: [ValidatorWhereInput!]
    address: StringFilter
    blocks: BlockFilter
    id: IntFilter
    proposeWeight: IntFilter
    voteWeight: IntFilter
}

input ValidatorWhereUniqueInput {
    address: String
    id: Int
}


scalar DateTime